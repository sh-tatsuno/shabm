// Code generated by MockGen. DO NOT EDIT.
// Source: bookmarks.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/sh-tatsuno/shabm/entity"
	reflect "reflect"
)

// MockBookmarkModelInterface is a mock of BookmarkModelInterface interface
type MockBookmarkModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkModelInterfaceMockRecorder
}

// MockBookmarkModelInterfaceMockRecorder is the mock recorder for MockBookmarkModelInterface
type MockBookmarkModelInterfaceMockRecorder struct {
	mock *MockBookmarkModelInterface
}

// NewMockBookmarkModelInterface creates a new mock instance
func NewMockBookmarkModelInterface(ctrl *gomock.Controller) *MockBookmarkModelInterface {
	mock := &MockBookmarkModelInterface{ctrl: ctrl}
	mock.recorder = &MockBookmarkModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookmarkModelInterface) EXPECT() *MockBookmarkModelInterfaceMockRecorder {
	return m.recorder
}

// GetAllBookmarks mocks base method
func (m *MockBookmarkModelInterface) GetAllBookmarks() ([]entity.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBookmarks")
	ret0, _ := ret[0].([]entity.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBookmarks indicates an expected call of GetAllBookmarks
func (mr *MockBookmarkModelInterfaceMockRecorder) GetAllBookmarks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBookmarks", reflect.TypeOf((*MockBookmarkModelInterface)(nil).GetAllBookmarks))
}

// CreateBookmark mocks base method
func (m *MockBookmarkModelInterface) CreateBookmark(bookmark entity.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookmark", bookmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBookmark indicates an expected call of CreateBookmark
func (mr *MockBookmarkModelInterfaceMockRecorder) CreateBookmark(bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookmark", reflect.TypeOf((*MockBookmarkModelInterface)(nil).CreateBookmark), bookmark)
}
